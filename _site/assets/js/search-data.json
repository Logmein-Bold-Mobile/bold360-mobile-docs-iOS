{"0": {
    "doc": "Chat Configuration",
    "title": "Chat Configuration",
    "content": "This article will help you customize initial chat view UI, and show you how to change UI on runtime according to live data. In order to change and override provided SDK implementations and customizations, one need to provide his own changed ChatConfiguration instance on ChatController.viewConfiguration. ",
    "url": "http://localhost:4000/docs/configuration",
    "relUrl": "/docs/configuration"
  },"1": {
    "doc": "Overview",
    "title": "Overview",
    "content": " ",
    "url": "http://localhost:4000/docs/overview.html",
    "relUrl": "/docs/overview.html"
  },"2": {
    "doc": "Overview",
    "title": "Table of contents",
    "content": ". | About | Features | Intended Audience | . ",
    "url": "http://localhost:4000/docs/overview.html#table-of-contents",
    "relUrl": "/docs/overview.html#table-of-contents"
  },"3": {
    "doc": "Overview",
    "title": "About",
    "content": "If you’re a bold360ai customer, please contact your bold360ai Customer Success Manager to help facilitate the use of this component. bold360ai’s Mobile SDK for iOS is a native iOS SDK, which means that the SDK was developed specifically for iOS devices. This ensures that native application can interact with and take advantage of iOS operating system features and related software. ",
    "url": "http://localhost:4000/docs/overview.html#about",
    "relUrl": "/docs/overview.html#about"
  },"4": {
    "doc": "Overview",
    "title": "Features",
    "content": ". | Create conversations from your app. | Bot Integration. | Live Agent Integration. | . ",
    "url": "http://localhost:4000/docs/overview.html#features",
    "relUrl": "/docs/overview.html#features"
  },"5": {
    "doc": "Overview",
    "title": "Intended Audience",
    "content": "This guide assumes that you have the necessary Objective C or Swift and iOS development skills to build and compile advanced iOS applications using XCode. ",
    "url": "http://localhost:4000/docs/overview.html#intended-audience",
    "relUrl": "/docs/overview.html#intended-audience"
  },"6": {
    "doc": "Quick Start",
    "title": "Quick Start",
    "content": " ",
    "url": "http://localhost:4000/docs/quickStart.html",
    "relUrl": "/docs/quickStart.html"
  },"7": {
    "doc": "Quick Start",
    "title": "Table of contents",
    "content": ". | System Requirements | Setup . | Create a Podfile in the root directory of your project. | Add Official CocoaPods PodSpecs repository to your Podfile: | Add bold360ai PodSpecs repository to your Podfile: | Add bold360ai iOS SDK to your Podfile: | Using terminal, with your project root directory as the working path, run: | . | Create new Project . | Set Up a Project in Xcode | Import SDK | Setup Chat Controller | Setup Live Chat | Setup Bot Chat . | Use Context | Configure Welcome Message Id | Create Initialization Entities | . | Add Chat View Controller by Implementing Delegate Methods | . | . ",
    "url": "http://localhost:4000/docs/quickStart.html#table-of-contents",
    "relUrl": "/docs/quickStart.html#table-of-contents"
  },"8": {
    "doc": "Quick Start",
    "title": "System Requirements",
    "content": "This article will help you get started with the development of bold360ai’s SDK for iOS. | iOS 9 and above | Automatic Reference Counting (ARC) is required in your project. | With the release of iOS 9 and Xcode 7, a new feature called App Transport Security (ATS) was introduced. | CocoaPods. | . ",
    "url": "http://localhost:4000/docs/quickStart.html#system-requirements",
    "relUrl": "/docs/quickStart.html#system-requirements"
  },"9": {
    "doc": "Quick Start",
    "title": "Setup",
    "content": "Note: Using CocoaPods on an existing Xcode project will modify the project file, so you may want to make a backup before doing this. Create a Podfile in the root directory of your project. $ pod init . Add Official CocoaPods PodSpecs repository to your Podfile: . source 'https://github.com/CocoaPods/Specs.git' . Add bold360ai PodSpecs repository to your Podfile: . source 'https://github.com/nanorepsdk/NRSDK-specs.git' . Add bold360ai iOS SDK to your Podfile: . pod 'Bold360AI' . Using terminal, with your project root directory as the working path, run: . pod install # pod update (use this when you want to get new released version). This will download all the necessary files which are required to integrate the bold360ai into your project. ",
    "url": "http://localhost:4000/docs/quickStart.html#setup",
    "relUrl": "/docs/quickStart.html#setup"
  },"10": {
    "doc": "Quick Start",
    "title": "Create new Project",
    "content": "Set Up a Project in Xcode . | Open Xcode and click start new Xcode Project: . | Next, select Single View Application and click Next: . | In the dialog screen displayed, enter the relevant details: . | . Import SDK . Go to the desired file (e.g., ViewController.swift) and add the line below: . import Bold360AI . Setup Chat Controller . var chatController: ChatController! var chatControllerDelegate: ChatControllerDelegate! var chatHandlerProvider: ChatHandlerProvider! var chatViewController: UIViewController! . Setup Live Chat . // setup Live Chat extension ViewController { @IBAction func setupBoldChat(_ sender: Any) { // 1. create account &amp; set let account = LiveAccount() account.apiKey = {API_KEY} self.chatController = ChatController(account: account) // 2. set controller delegate self.chatController.delegate = self } } . Note: LiveAccount is managed by forms (preChat, postChat, unavailable). Only preChat form contains default SDK implementation, means postChat and unavailable forms should be implemented by the application. Make sure to read chat lifecycle doc and register to relevant states (e.g unavailable state). Setup Bot Chat . // Setup Bot Chat extension ViewController { @IBAction func setupBotChat(_ sender: Any) { // 1. create account &amp; set let account = self.createAccount() self.chatController = ChatController(account: account) // 2. set controller delegate self.chatController.delegate = self } func createAccount() -&gt; BotAccount { let account = BotAccount() account.account = \"ACCOUNT\" account.knowledgeBase = \"KNOWLEDGE_BASE\" account.apiKey = \"API_KEY\" return account; } } . Use Context . Context is a key-value parameter, so when you create the BotAccount object you can set NSDictionary which contains the related context. // Using the context: botAccount.context = [\"someKey\": \"someValue\"] . Configure Welcome Message Id . When you create the BotAccount object you can set welcome message id. botAccount.welcomeMessageId = \"{WELCOME_MESSAGE_ID}\" . To Disable Welcome Message . botAccount.welcomeMessageId = WelcomeMsgIdNone . Create Initialization Entities . Entities is a feature of Bold360 that enables querying data from external sources in a conversational format. If a piece of info is missing from a bot query - the bot asks for the missing data to be able to answer. The application can populate the entity input values that are available - not to let the bot ask for input params that are “obviously available.” . // Creating Initialization Entities: botAccount.initializationEntities = [\"someKey1\": \"someValue1\", \"someKey1\": \"someValue2\"] . Add Chat View Controller by Implementing Delegate Methods . extension ViewController: ChatControllerDelegate { func didFailLoadChatWithError(_ error: Error!) { print(error.localizedDescription) } func shouldPresentChatViewController(_ viewController: UINavigationController!) { // 4. present modally/ as child view controller over your view controller. &lt;YOUR_VIEW_CONTROLLER&gt;.present(viewController, animated: false, completion: nil) } } . ",
    "url": "http://localhost:4000/docs/quickStart.html#create-new-project",
    "relUrl": "/docs/quickStart.html#create-new-project"
  },"11": {
    "doc": "Setting Account",
    "title": "Setting Account",
    "content": " ",
    "url": "http://localhost:4000/docs/configuration/settingAccount.html",
    "relUrl": "/docs/configuration/settingAccount.html"
  },"12": {
    "doc": "Setting Account",
    "title": "Table of contents",
    "content": ". | Bot Account | Live Account | . ",
    "url": "http://localhost:4000/docs/configuration/settingAccount.html#table-of-contents",
    "relUrl": "/docs/configuration/settingAccount.html#table-of-contents"
  },"13": {
    "doc": "Setting Account",
    "title": "Bot Account",
    "content": "func createAccount() -&gt; BotAccount { let account = BotAccount() account.account = \"ACCOUNT\" account.knowledgeBase = \"KNOWLEDGE_BASE\" account.apiKey = \"API_KEY\" return account; } . ",
    "url": "http://localhost:4000/docs/configuration/settingAccount.html#bot-account",
    "relUrl": "/docs/configuration/settingAccount.html#bot-account"
  },"14": {
    "doc": "Setting Account",
    "title": "Live Account",
    "content": "func createAccount() -&gt; BotAccount { let account = LiveAccount() account.apiKey = {API_KEY} return account; } . ",
    "url": "http://localhost:4000/docs/configuration/settingAccount.html#live-account",
    "relUrl": "/docs/configuration/settingAccount.html#live-account"
  }
}
